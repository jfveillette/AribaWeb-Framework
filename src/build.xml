<?xml version="1.0"?>

<!--
    Copyright 1996-2008 Ariba, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    (Some contents derived from a parallel Apache Lucene file, also licenced
     under the same license)

    $Id:  $
 -->

<project name="aribaweb-all" default="default" basedir=".">

    <property file="version.properties"/>
    <property name="junit.includes" value="**/Test*.java"/>

    <available file="build-support" value="build-support" property="make.common.dir"/>
    <available file="../build-support" value="../build-support" property="make.common.dir"/>
    <import file="${make.common.dir}/common-build.xml"/>

    <property name="javadoc.link" value="http://java.sun.com/j2se/1.4/docs/api/"/>

    <!-- Type of checksum to compute for distribution files -->
    <property name="checksum.algorithm" value="md5"/>

    <available file="${basedir}/../../util/core"
              value="${basedir}/../../util/core"
           property="src.util.dir"/>
    <property name="src.util.dir" location="${basedir}/util"/>
    <available file="${basedir}/../../util/expr"
              value="${basedir}/../../util/expr"
           property="src.expr.dir"/>
    <property name="src.expr.dir" location="${basedir}/expr"/>
    <available file="${basedir}/../aribaweb"
              value="${basedir}/../"
           property="src.ui.dir"/>
    <property name="src.ui.dir" location="${basedir}"/>

    <property name="binary.dist.zip" location="${dist.dir}/aribaweb-${version}.zip"/>
    <property name="src.dist.zip" location="${dist.dir}/aribaweb-src-${version}.zip"/>
    
    <!-- Build classpath -->
    <path id="classpath">
        <resources refid="build.deps"/>
        <resources refid="build.deps-internal"/>
        <resources refid="build.jars"/>
        <pathelement location="${build.dir}/classes/java"/>
    </path>

    <!-- Javadoc classpath -->
    <path id="javadoc.classpath">
        <path refid="classpath"/>
        <pathelement location="${ant.home}/lib/ant.jar"/>

        <!-- NOTE: gdata jars only used with jdk 5 but include them even for lower jdk -->
        <fileset dir="module">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <path id="demo.classpath">
        <path refid="classpath"/>
        <pathelement location="${build.dir}/classes/demo"/>
    </path>

    <path id="test.classpath">
        <path refid="demo.classpath"/>
        <pathelement location="${build.dir}/classes/test"/>
    </path>


    <path id="junit.classpath">
        <pathelement location="${build.dir}/classes/test"/>
        <pathelement location="${build.dir}/classes"/>
        <pathelement location="${build.dir}/classes/demo"/>
        <pathelement path="${java.class.path}"/>
    </path>

    <!-- ================================================================== -->
    <!-- Prepares the build directory                                       -->
    <!-- ================================================================== -->

    <target name="test-core" depends="common.test"
            description="Runs unit tests for the core AribaWeb code"
            />
    <target name="test" depends="test-core, test-module"
            description="Runs all unit tests (including modules)"
            />

    <!-- ================================================================== -->
    <!-- J A R                                                              -->
    <!-- ================================================================== -->
    <!--                           `                                         -->
    <!-- ================================================================== -->

    <target name="jar" depends="jar-module"
            description="Packages the JAR file">
    </target>

    <target name="demoshell-war" depends="jar">
        <subant target="war" failonerror="true">
            <property name="make.common.dir" value="${basedir}/build-support"/>
            <property name="build.dir" value="${build.dir}"/>
            <fileset dir="${src.ui.dir}" includes="demoshell/build.xml"/>
        </subant>
    </target>

    <target name="simple-war" depends="jar">
        <subant target="war" failonerror="true">
            <property name="make.common.dir" value="${basedir}/build-support"/>
            <property name="build.dir" value="${build.dir}"/>
            <fileset dir="${basedir}" includes="samples/simple/build.xml"/>
        </subant>
    </target>

    <target name="BusObjUI-war" depends="jar">
        <subant target="war" failonerror="true">
            <property name="make.common.dir" value="${basedir}/build-support"/>
            <property name="build.dir" value="${build.dir}"/>
            <fileset dir="${basedir}" includes="samples/BusObjUI/build.xml"/>
        </subant>
    </target>

    <target name="wars" depends="demoshell-war, simple-war, BusObjUI-war"/>

    <target name="has-tomcat">
        <fail unless="env.CATALINA_HOME" message="CATALINA_HOME must be set to launch tomcat"/>
    </target>

    <target name="-tomcat-no-debug" unless="env.JPDA_ADDRESS">
        <property name="demoshell.home" location="${src.ui.dir}/demoshell/site"/>
        <echo message="Launching tomcat with CATALINA_BASE=${catalina.base.dir}, ARIBA_DEMOSHELL_HOME=${demoshell.home} ([CTRL-C] to stop)..."/>
        <echo message="Connect via http://localhost:8080/Demo/AribaWeb"/>
        <java jar="${env.CATALINA_HOME}/bin/bootstrap.jar" fork="true">
            <env key="ARIBA_DEMOSHELL_HOME" value="${demoshell.home}"/>
            <jvmarg value="-Dcatalina.home=${env.CATALINA_HOME}"/>
            <jvmarg value="-Dcatalina.base=${catalina.base.dir}"/>
        </java>
    </target>

    <target name="-tomcat-debug" if="env.JPDA_ADDRESS">
        <property name="demoshell.home" location="${src.ui.dir}/demoshell/site"/>
        <echo message="Launching tomcat in debug mode (port ${env.JPDA_ADDRESS}) with CATALINA_BASE=${catalina.base.dir}, ARIBA_DEMOSHELL_HOME=${demoshell.home} ([CTRL-C] to stop)..."/>
        <echo message="Connect via http://localhost:8080/Demo/AribaWeb"/>
        <java jar="${env.CATALINA_HOME}/bin/bootstrap.jar" fork="true">
            <env key="ARIBA_DEMOSHELL_HOME" value="${demoshell.home}"/>
            <jvmarg value="-Dcatalina.home=${env.CATALINA_HOME}"/>
            <jvmarg value="-Dcatalina.base=${catalina.base.dir}"/>
            <jvmarg value="-Xdebug"/>
            <jvmarg value="-Xrunjdwp:transport=${env.JPDA_TRANSPORT},address=${env.JPDA_ADDRESS},server=y,suspend=n"/>
        </java>
    </target>

    <target name="tomcat" depends="has-tomcat, -tomcat-debug, -tomcat-no-debug"/>

    <target name="tomcat-exec" depends="has-tomcat">
        <property name="demoshell.home" location="${src.ui.dir}/demoshell/site"/>
        <condition property="catalina-command" value="catalina.bat">
            <os family="windows"/>
        </condition>
        <property name="catalina-command" value="catalina.sh"/>
        <echo message="Launching tomcat with CATALINA_BASE=${catalina.base.dir}, ARIBA_DEMOSHELL_HOME=${demoshell.home} ([CTRL-C] to stop)..."/>
        <echo message="Connect via http://localhost:8080/Demo/AribaWeb"/>        
        <exec dir="." executable="${env.CATALINA_HOME}/bin/${catalina-command}">
            <env key="CATALINA_BASE" value="${catalina.base.dir}"/>
            <env key="ARIBA_DEMOSHELL_HOME" value="${demoshell.home}"/>
            <arg value="jpda"/>
            <arg value="run"/>
        </exec>
    </target>

    <target name="tomcat-build" depends="wars, tomcat"/>


    
    <!-- ================================================================== -->
    <!-- D O C U M E N T A T I O N                                          -->
    <!-- ================================================================== -->
    <!--                                                                    -->
    <!-- ================================================================== -->
    <target name="docs" description="Build the website">
        <echo>DEPRECATED - Doing Nothing. See
            http://wiki.apache.org/aribaweb-java/HowToUpdateTheWebsite
        </echo>
    </target>

    <target name="javadocs" description="Generate javadoc" depends="build-module">
        <mkdir dir="${build.dir}/docs/api"/>
        <invoke-javadoc
                access="protected"
                destdir="${build.dir}/docs/api"
                />
    </target>

    <target name="javadocs-internal" depends="build-module">
        <mkdir dir="${build.dir}/docs/api-internal"/>
        <invoke-javadoc
                access="package"
                destdir="${build.dir}/docs/api-internal"
                />
    </target>


    <!-- ================================================================== -->
    <!-- D I S T R I B U T I O N                                            -->
    <!-- ================================================================== -->
    <!--                                                                    -->
    <!-- ================================================================== -->
    <target name="package"
            depends="package-zip, package-src">
    </target>

    <!-- ================================================================== -->
    <!-- Packages the distribution with zip                                 -->
    <!-- ================================================================== -->
    <!--                                                                    -->
    <!-- ================================================================== -->
    <target name="package-zip" depends="wars"
            description="--> Generates the AribaWeb distribution as .zip">
        <mkdir dir="${dist.dir}"/>
        <delete file="${binary.dist.zip}"/>
        <zip destfile="${binary.dist.zip}">
            <zipfileset prefix="aribaweb-${version}" dir="${dist.root.dir}">
                <patternset refid="binary.root.dist.patterns"/>
            </zipfileset>
        </zip>
        <aribaweb-checksum file="${binary.dist.zip}"/>
    </target>

    <target name="package-src"
            description="--> Generates the AribaWeb source code distribution as .zip">
        <mkdir dir="${dist.dir}"/>
        <delete file="${src.dist.zip}"/>
        <zip destfile="${src.dist.zip}">
            <zipfileset prefix="aribaweb-${version}" dir="${dist.root.dir}">
                <patternset refid="src.dist.patterns"/>
            </zipfileset>
        </zip>
        <aribaweb-checksum file="${src.dist.zip}"/>
    </target>


    <target name="dist-all" depends="package"/>

    <target name="check-ftp">
        <fail unless="env.ARIBAWEB_FTP_HOST"/>
        <fail unless="env.ARIBAWEB_FTP_USERNAME"/>        
        <fail unless="env.ARIBAWEB_FTP_PASSWORD"/>
    </target>

    <target name="ftp-dist" depends="check-ftp, dist-all">
        <ftp server="${env.ARIBAWEB_FTP_HOST}"
             remotedir="/incoming"
             userid="${env.ARIBAWEB_FTP_USERNAME}"
             password="${env.ARIBAWEB_FTP_PASSWORD}"
             depends="yes">
          <fileset dir="${dist.dir}">
              <include name="*.zip"/>
          </fileset>
        </ftp>
    </target>

    <target name="generate-maven-artifacts" depends="maven.ant.tasks-check, package">
        <sequential>
            <m2-deploy pom.xml="aribaweb-parent-pom.xml"/>
            <m2-deploy pom.xml="aribaweb-core-pom.xml"/>
            <module-crawl target="dist-maven"/>
            <!-- do md5 checksums -->
            <checksum forceOverwrite="yes" fileext=".md5">
                <fileset dir="${maven.dist.dir}" excludes="**/*.md5"/>
            </checksum>

            <!-- do sha1 checksums -->
            <checksum forceOverwrite="yes" algorithm="SHA" fileext=".sha1">
                <fileset dir="${maven.dist.dir}" excludes="**/*.sha1, **/*.md5"/>
            </checksum>
        </sequential>
    </target>

    <macrodef name="module-crawl">
        <attribute name="target" default=""/>
        <attribute name="failonerror" default="true"/>
        <sequential>
            <subant target="@{target}" failonerror="@{failonerror}">
                <property name="make.common.dir" location="${make.common.dir}"/>
                <property name="build.dir" value="${build.dir}"/>
                <fileset dir="${src.util.dir}" includes="build.xml"/>
                <fileset dir="${src.expr.dir}" includes="build.xml"/>
                <fileset dir="${src.ui.dir}" includes="aribaweb/build.xml"/>
                <fileset dir="${src.ui.dir}" includes="widgets/build.xml"/>
                <fileset dir="${src.ui.dir}" includes="metaui/build.xml"/>
                <fileset dir="${src.ui.dir}" includes="demoshell/build.xml"/>
                <fileset dir="${src.ui.dir}" includes="samples/simple/build.xml"/>
            </subant>
        </sequential>
    </macrodef>

    <target name="build-module"
            description="Builds all module modules and their tests">
        <module-crawl target="build"/>
    </target>

    <target name="jar-module"
            description="Builds all module modules and their tests">
        <module-crawl target="jar"/>
    </target>

    <target name="test-module" depends="build-module">
        <!-- Don't fail on error, instead check for flag file so we run
            all the tests possible and can "ant generate-test-reports"
            for all of them.

            Because of this, we depend on "build-module" even though the
            Individual module "test" targets probably have the
            neccessary dependencies.  If they fail to compile, we won't
            know about it.
        -->
        <module-crawl target="test" failonerror="false"/>
        <available property="modules.failed" file="junitfailed.flag">
            <filepath>
                <dirset dir="${build.dir}/module/">
                    <include name="**/test/"/>
                </dirset>
            </filepath>
        </available>
        <fail if="modules.failed">Contrib tests failed!</fail>
    </target>

    <macrodef name="invoke-javadoc">
        <attribute name="access"/>
        <attribute name="destdir"/>
        <sequential>

            <javadoc
                    overview="src/java/overview.html"
                    packagenames="ariba.ui.aribaweb.*"
                    destdir="@{destdir}"
                    access="@{access}"
                    encoding="${build.encoding}"
                    author="true"
                    version="true"
                    use="true"
                    source="${ant.java.version}"
                    link="${javadoc.link}"
                    windowtitle="${Name} ${version} API"
                    doctitle="${Name} ${version} API"
                    bottom="Copyright &amp;copy; ${year} Ariba, Inc.  All Rights Reserved.">
                <tag name="todo" description="To Do:"/>


                <packageset dir="${src.util.dir}"/>
                <packageset dir="${src.expr.dir}"/>
                <packageset dir="${src.ui.dir}/aribaweb"/>
                <packageset dir="${src.ui.dir}/widgets"/>
                <packageset dir="${src.ui.dir}/metaui"/>
                <packageset dir="${src.ui.dir}/demoshell"/>

                <!-- If the main javadoc Group listing includes an "Other   -->
                <!-- Packages" group after the ones listed here, then those -->
                <!-- packages are not being matched by any of these rules   -->

                <group title="util" packages="ariba.util.core.*:ariba.util.fieldvalue.*"/>
                <group title="expr" packages="ariba.util.expr.*"/>

                <group title="aribaweb" packages="ariba.ui.aribaweb.*"/>
                <group title="widgets"
                       packages="ariba.ui.widgets.*:ariba.ui.table.*:ariba.ui.outline.*:ariba.ui.wizard.*"/>
                <group title="metaui" packages="ariba.ui.meta.*"/>
                <group title="metaui" packages="ariba.ui.demoshell.*"/>

                <classpath refid="javadoc.classpath"/>

            </javadoc>

        </sequential>
    </macrodef>

    <!-- Macro for building checksum files
        This is only needed until the "format" option is supported
        by ant's built in checksum task
    -->
    <macrodef name="aribaweb-checksum">
        <attribute name="file"/>
        <!-- NOTE: we use the value of @{file} in the names any properties
           set because macro's don't have variables, and otherwise we
           wouldn't be able to checksum more then one file per build
        -->
        <sequential>
            <checksum file="@{file}"
                      property="@{file}.sum"
                      algorithm="${checksum.algorithm}"/>
            <basename file="@{file}" property="@{file}.base"/>
            <concat destfile="@{file}.${checksum.algorithm}"
                    force="yes"
                    append="false"
                    fixlastline="yes">
                <header trimleading="yes">${@{file}.sum}</header>
                <!-- empty fileset to trick concat -->
                <fileset dir="." excludes="**"/>
                <footer trimleading="yes">${@{file}.base}
                </footer>
            </concat>
        </sequential>
    </macrodef>
</project>
