<a:Api>
    <Copyright>
        Copyright 1996-2008 Ariba, Inc.

        Licensed under the Apache License, Version 2.0 (the "License");
        you may not use this file except in compliance with the License.
        You may obtain a copy of the License at
            http://www.apache.org/licenses/LICENSE-2.0

        Unless required by applicable law or agreed to in writing, software
        distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and
        limitations under the License.

        $Id: //ariba/platform/ui/widgets/ariba/ui/widgets/CompletionPopup.awl#6 $
    </Copyright>

    <Overview>
        The CompletionPopupContainer is used to wrap a TextField and allows for a "completion list"
        to be displayed as the user types into the test field.  Once the user starts typing, a fetch is
        initiated to the server if the user stops typeing for 1 second.  The server returns a list filtered
        by the prefix defined by the users inital typing.  As the user continues typing, the list
        gets smaller.  Once the list displays, the user may choose from the list via the arrow up/down
        keys, or may click on an item in the list.  The size of the popup is limited and will scroll
        as the user arrows through the list, wrapping around from bottom to top and vice versa.

        If the user backspaces out to a smaller prefix than their original fetch, a new fetch is initiated
        after a 0.5 second delay.

        When the fetch request is sent to the server, this component (during the invokeAction phase)
        pushes the user's "prefix" into the application's component and then pulls the
        "list" from the application's component.  Both are required bindings.  The application
        should return a list of Strings (in any form of AWOrderedList such as String[], List, Vector)
        which all have the user's prefix.

        The bulk of the implementation for this is in the widgets.js file
        under the section labelled "Completion Popup"
    </Overview>

    <Binding key="prefix" direction="set" type="String" required="$true">
        The user's string which should be used as a prefix to filter
        the query for the "list".  This is pushed into the application's
        component immediately prior to pulling the list binding (see below).
    </Binding>

    <Binding key="list" direction="get" type="AWOrderedList" required="$true">
        The application component should provide a list of Strings by querying
        some source filtered by the user's prefix pushed into the component (see above).
    </Binding>

    <Binding key="ignoreCase" direction="get" type="boolean" default="$true">
        If true, comparisons against the user-entered prefix are case-insensitive.
    </Binding>

    <Binding key="maxLength" direction="get" type="int" default="100">
        The maximum number of items to be displayed in the popup list.
        If the list is longer than this value, only the first maxLength items
        will be displayed, but an additional items will be displayed at the
        bottom titled "Other...".  If the user clicks "Other..." the "othersAction"
        will be fired.
    </Binding>

    <Binding key="othersAction" direction="get" type="AWResponseGenerating" required="$false">
        See maxLength.  This binding only makes sense if the list provided is
        longer than maxLength.
    </Binding>

    <Binding key="minPrefix" direction="get" type="int" default="1">
        The minimum allowed length of a prefix required before
        a server fetch will be requested.
    </Binding>
</a:Api>\

<span
    elementId="$spanId" id="$spanId"
    onKeyDown="cPCompletionPopup.handleKeyDown(event)"
    onMouseOver="cPCompletionPopup.handleMouseOver(event)"
    onMouseOut="cPCompletionPopup.handleMouseOut(event)"
    onMouseDown="cPCompletionPopup.handleMouseDown(event)"
    onClick="cPCompletionPopup.handleClick(event)"
    invokeAction="$generateList">\
    <div elementId="$divId" id="$divId"
        class="CPPopupDiv"
        style="display:none;"
        invokeAction="$^othersAction">\
        <!--- list of strings will appear here in dom -->\
    </div>\
    <a:IncludeContent/>\
</span>
<a:Singleton>\
    <!--- This span is included one time in the page and is used as a source
          for the localized version of "Others...".  It is copied into the
          item list during the fetch operation (see widgets.js).
     -->
    <span id="CPOthersLocalizedText" style="display:none">\
        <a:Local key="a001">Others...</a:Local>\
    </span>\
</a:Singleton>\

<a:ClientSideScript isSingleton="$false">
    // Create new CPCompletionPopup and register itself on the span as "cpcompletionPopup"
    new ariba.Chooser.cPCompletionPopup('$spanId', <a:PrimitiveString value="$^ignoreCase:$true"/>, <a:PrimitiveString value="$^minPrefix:1"/>);
</a:ClientSideScript>\
