@actionCategory=Create { }
@actionCategory=Search { }

actionCategory=Create {
    action=Create {
        label:${ariba.ui.meta.core.UIMeta.beautifyClassName(properties.class)};
    }
}

class {
    displayKey:toString;

    searchOperation:search;

    trait=Searchable {
        textSearchSupported:true;
        searchOperation:keywordSearch;
    }


    operation=keywordSearch {
        useTextIndex:true;

        field { visible:false; }
        @field=keywords#SearchableProperty { visible:true!; type:java.lang.String; rank:0; after:zTop; bindings: { size:30 } }
    }
    
    operation=textSearch {
        field {
            trait=SearchableProperty {
                visible:true!;
            }
        }
    }
}

field {
    trait=toOneRelationship {
        editable {
            component:GenericChooser;
            bindings:{
                object:${object};
                key:${field};
                destinationClass:${type};
                displayKey:${ariba.ui.meta.core.UIMeta.getInstance().displayKeyForClass(type)};
            };
        }
        editable=false {
            component:AWHyperlink;
            bindings: {
                action: ${
                    set("object", value);
                    set("actionCategory", "Manage");
                    set("action", "Inspect");
                    ariba.ui.meta.core.UIMeta.getInstance().fireAction(this, requestContext)
                };
                awcontent: ${value ? ariba.util.fieldvalue.FieldValue.getFieldValue(value, ariba.ui.meta.core.UIMeta.getInstance().displayKeyForClass(type)) : null};
            }
        }
    }

    trait=toManyChooser {
        component:GenericChooser;
    }

    trait=toManyTable {
        component:MetaDetailTable;
    }

    trait=toManyLink {
        component:AWHyperlink;
        bindings: {
            action: ${
                set("object", value);
                set("actionCategory", "Manage");
                set("action", "Inspect");
                ariba.ui.meta.core.UIMeta.getInstance().fireAction(this, requestContext)
            };
            omitTags:${!value || value.size() ==0};
            awcontent: ${value ? ("" + value.size() + " items") : "(none)"};
        }
    }
    
    trait=(toManyChooser, toManyTable) {
        bindings:{
            object:${object};
            key:${field};
            destinationClass:${elementType};
            multiSelect:true;
            displayKey:${ariba.ui.meta.core.UIMeta.getInstance().displayKeyForClass(elementType)};
        }
    }

    trait=toManyRelationship {
        editable {
            trait:toManyChooser;
        }
        editable=false  { trait: toManyLink }
        trait=ownedToMany { trait: toManyTable }
    }

    valueRedirector {
        value:$values.valueRedirector.val;
    }
    operation=search ~valueRedirector  {
        type=(java.util.Date, java.lang.Number) {
            component:MetaRange;
        }
    }
}

@traitGroup=RelViewers {
    @trait=toManyChooser;
    @trait=toManyTable;
    @trait=toManyLink;
}

action {
    trait=newContext {
        actionResults:${ariba.ui.meta.persistence.ObjectContext.bindNewContext();
                    requestContext.pageWithName(properties.pageName)}
    }
}

action=Create {
    visible:true;
    trait:pageAction;
    pageName:MetaContentPage;
    pageBindings: {
        /* Should bind a new session */
        object:${ariba.ui.meta.persistence.ObjectContext.get().create(values().get("class"))};
        operation:create;
        layout:Inspect;
        clientPanel:true;
    }

    displayGroup dataSourceType {
        pageBindings: {
            object:${displayGroup.insert()};
        }
    }

    displayGroup dataSourceType="ariba.ui.meta.persistence.DetailDataSource" {
        label:"Add";
        visible:${displayGroup.dataSource.parentObject != null}
    }
}

layout=Global {
    @actionCategory=Create {
        @action=Create { }
    }
}

@actionCategory=Manage {
    layout=(SelectionButtonArea, TableRow) {
        @action=Inspect {
            trait:instance, pageAction;
            visible:true;
            component:TextButton;
            bindings: {
                awcontent:"Inspect";
            }
            pageName:MetaContentPage;
            pageBindings: {
                object:${ariba.ui.meta.persistence.ObjectContext.get().merge(object)};
                layout:Inspect;
                operation:edit;
                clientPanel:true;
            }
        }

        @action=Delete {
            trait:instance;
            actionResults:${
                ctx = ariba.ui.meta.persistence.ObjectContext.get();
                ctx.remove(object);
                ctx.save();
                ariba.ui.widgets.AribaPageContent.setMessage("Item Deleted", requestContext.session());
                null};

            displayGroup dataSourceType="ariba.ui.meta.persistence.DetailDataSource" {
                label:"Remove";
                actionResults:${
                    displayGroup.dataSource.delete(object);
                    null};
            }
        }
    }
    layout=ButtonArea {
        @action=Create {}
    }
}

/*
field { label: ${ariba.ui.meta.core.UIMeta.getInstance().throwSampleException()} }
*/

operation=list {
    @actionCategory=Manage { visible:true }
    
    field=ActionCol {
        after:zBottom;
    }
}

module {
    @trait=ModuleClassPage {
        layout:SearchPage;
        homePage:MetaContentPage;
        pageBindings: {
            class:${properties.moduleClassName};
            displayGroup:${new ariba.ui.table.AWTDisplayGroup()};
            module:$module;
            scopeKey:layout;
        }
    }

    @trait=SearchDetail {
        layout:SearchDetailPage;
        homePage:MetaContentPage;
        pageBindings: {
            class:${properties.moduleClassName};
            displayGroup:${new ariba.ui.table.AWTDisplayGroup()};
            module:$module;
            scopeKey:layout;
        }
    }

    @trait=SearchInToc;
}

layout=SearchPage {
    component:MetaDashboardLayout;
    @layout=SearchTOC {
       label:"Actions";
       component:MetaActionList;
       bindings: { filterActions:static }
       after:zToc;
       area:Global;
    }
    @layout=Search {
       label:"Search";
       component:MetaSearch;
       after:zTop;
    }
}

layout=Search layout=Table {
    class { bindings: { showHeadingArea:true; } }
    layout=HeadingArea {
        component:MetaSearchForm;
    }
}

module_trait=SearchDetail {
    layout=SearchDetailPage {
        component:MetaDashboardLayout;
        visible:true;
        bindings: {widthLeft:"450px"; widthRight:auto; }
        label:${pushAndResolve([module:"*"], "label")};

        @layout=Search {
            label:"Search";
            component:MetaSearch;
            after:zLeft;
        }

        layout=SearchForm {
            wrapperComponent:AWGenericContainer;
            wrapperBindings: { tagName:div; style:"padding:0px 5px" }
            class { bindings:{ omitLabelPadding:true; } }
        }

        @layout=Detail {
            after:zRight;
            component:MetaContext;
            portletWrapper:AWTNullWrapper;
            bindings: {
                object:$displayGroup.selectedObject;
                layout:InspectStack;
                operation:${displayGroup.selectedObject ? "edit" : "view"};
                awcontentElement:MetaIncludeComponent;
            }
        }

        layout=Actions#ActionButtons {
            elementStyle:"padding-top:10px";
            @actionCategory=Data {
                @action=Save {
                    actionResults:${ariba.ui.meta.persistence.PersistenceMeta.validateAndSave(this)};
                    visible:${properties.editing}
                }
            }
        }
    }

    displayGroup dataSourceType="ariba.ui.meta.persistence.ObjectContextDataSource" {
        action=Create {
            label:"New";
            actionResults:${displayGroup.insert(); null}
        }
        action=Inspect {
            visible:false;
        }
    }

    component=MetaForm {
        wrapperComponent:AWGenericContainer;
        wrapperBindings: { tagName:div; class:smallForm; }
    }

    field=ActionCol { after:zNone }
}

module_trait=SearchInToc {
    layout {
        @layout=SearchToc {
            label:"Search";
            component:MetaSearchForm;
            after:zToc;
            layout=SearchForm#labelsOnTop {
                class {
                    trait:oneZone;
                }
            }
        }
        layout=Search {
            label:"Search Results";
            layout=Table { class { bindings: { showHeadingArea:false; title:null; } } }
        }
    }
}
