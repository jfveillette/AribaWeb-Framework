/*
    Copyright 2008 Craig Federighi

    Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
    file except in compliance with the License.
    You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    $Id:  $
*/
object { class: ${object.getClass().getName()} }
object declare { class: ${object.getClass().getName()} }

/* for search, force explicit class, not one from object (since that's a hashmap */
operation=search {
    class:${values.get("class")}
}

operation=(edit, create, search) {
    editing:true;
    field="*" { editable:true; }
}
operation=(view, list) {
    editing:false;
    field="*" { editable:false; }
}

class {
    trait=fourZones {
        zones: zLeft, zRight, zTop, zBottom, zDetail;
        fourZoneLayout:true;
    }
    trait=oneZone {
        zones: [zLeft, zDetail];
    }

    traits: fourZones;
}

field {
    type                    { component:AWString; bindings:{value:$value} }
    type=boolean { 
        bindings:{formatter:$component.formatters.boolean};
        editable { component:AWCheckbox }
    }
    type=ariba.util.core.Date   {
        bindings:{formatter:$component.formatters.shortDate};
        editable                { component:DateField }
    }
    type=java.math.BigDecimal   {
        bindings:{formatter:$component.formatters.money};
        editable                {
            component:AWTextField;
            bindings:{
                style:"text-align:right";
                size:13;
            };
        }
    }
    type=java.lang.Enum   {
        editable                {
            component:GenericChooser;
            bindings:{
                object:${object};
                key:${field};
                destinationClass:${type};
                displayKey:"name";
                formatter:$component.formatters.identifier;
            };

            operation=(search, list) {
                bindings: { type:Popup; }
            }
        }
    }

    type=java.util.List {
        trait=enum editable {
            component:GenericChooser;
            bindings:{
                object:${object};
                key:${field};
                multiSelect:true;
                destinationClass:${properties.enumClass};
                displayKey:"name";
                formatter:$component.formatters.identifier;
            };
        }
        operation=(search, list)        { visible:false }
    }
    type=(java.math.Integer, int) {
        bindings:{formatter:$component.formatters.integer};
        editable                { component:AWTextField; bindings:{style:"text-align:right"; size:13} }
    }
    type=java.lang.String {
        editable                { component:AWTextField }
        trait=(longtext,LongText) {
            after:zBottom;
            editable            { component:AWTextArea;
                                  bindings:{cols:60; rows:10} }
            operation=(search, list)  { visible:false }
        }
        trait=(richtext,RichText) {
            after:zBottom;
            bindings:{escapeUnsafeHtml:true}
            editable            { component:RichTextArea;
                                  bindings:{cols:60; rows:10} }
            operation=(search, list)  { visible:false }
        }
        trait=(secret, Secret)  {
            bindings:{formatter:$component.formatters.hiddenPassword};
            editable   { component:AWPasswordField; bindings:{formatter:null} }
            operation=(search, list) { visible: false; }
        }
        trait=(truncated, Truncated) { component:TruncateString; bindings:{size:10} }
    }

    trait=derived {
        editable:false;
        visible:false;
        editing { visible:false; }
    }

    trait=(required, Required) editable {
        required:true;
        valid: ${(value != null && value !="") ? true : "Answer required"}
    }

    trait=enumeration {
        editable { component:GenericChooser; bindings:{
                    object:${object}; key:${properties.field}; list:${properties.choices};
                }
        }
    }

    trait=noCreate operation=create { visible:false }

    trait=ownedToMany {
        after:zDetail;
        component:MetaDetailTable;
    }
}

field {
    trait=(action, pageAction) {
        bindings: { action: [${meta().fireAction(this, component.requestContext)}] }
    }

    trait=pageAction {
        actionResults:${requestContext.pageWithName(properties.pageName)}
    }
}

action {
    visible:true;
    enabled:true;

    trait=pageAction {
        actionResults:${requestContext.pageWithName(properties.pageName)}
    }

    trait=modalComponentPage {
        actionResults:${requestContext.pageWithName("MetaModalPage")};
        pageBindings:{
            componentName:${properties.componentName};
            title:${properties.title};
        }
    }
    
    trait=modalComponentPanel {
        actionResults:${requestContext.pageWithName("MetaModalPage")};
        pageBindings:{
            componentName:${properties.componentName};
            title:${properties.title};
            clientPanel:true;
        }
    }

    trait=messageResults {
        message:"Action Performed: %s";
        actionResults:${
            def o = (properties.isInstanceAction) ? object : ariba.ui.aribaweb.util.AWUtil.classForName(properties.class);
            def v = ariba.util.fieldvalue.FieldValue.getFieldValue(o, properties.action);
            def m = ariba.util.core.Fmt.S(properties.message, v);
            ariba.ui.widgets.AribaPageContent.setMessage(m, requestContext.session());
            null};
    }

    trait=instance {
    	enabled:${object != null};
    	isInstanceAction:true;
    }

    filterActions=instance {
    	visible:${properties.isInstanceAction}
    }
    filterActions=static {
    	visible:${!properties.isInstanceAction}
    }
}

layout {
    zones: [zMain];
    trait=ActionMenu { visible:true; component:MetaActionList bindings:{renderAsMenu:true} elementClass:flR }
    trait=InstanceActionButtons { visible:true; component:MetaActionList
                bindings:{renderAsButtons:true;filterActions:instance} elementClass:flR }
    trait=StaticActionButtons { visible:true; component:MetaActionList
                bindings:{renderAsButtons:true;filterActions:static} elementClass:flR }
    trait=Tabs { visible:true; component:MetaTabs }
    trait=Sections { visible:true; component:MetaSections }
    trait=Form { visible:true; component:MetaForm }
    trait=Stack { visible:true; component:MetaElementList }

    trait=OwnZone class {
        zonePath:${layout}
    }
}
layout=Inspect { traits:Form }
layout=InspectWithActions {
    traits:Stack;
    @layout#ActionMenu;
    @layout#Form;
}
layout=ButtonArea { traits:StaticActionButtons }
layout=SelectionButtonArea { traits:InstanceActionButtons }

/* Support @Trait("LabelField") to identity label field */
layout=LabelField field {
    visible:false;
    trait=LabelField { visible:true! }
}

module {
    visible:true;
    homePage:MetaHomePage;
    component:MetaDashboardLayout;
    layout { visible:true }

    trait=ActionTOC {
        @layout=Actions {
           label:"Actions";
           component:"MetaActionList";
           after:zToc;
        }
    }
}

actionCategory {
    visible:true;
}
@actionCategory=Manage {}


/* For groovy */
field=metaClass { visible:false }
