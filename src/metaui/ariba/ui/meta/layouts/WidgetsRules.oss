/*
    Copyright 2008 Craig Federighi

    Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
    file except in compliance with the License.
    You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    $Id:  $
*/
object { class: ${object.getClass().getName()} }
object declare { class: ${object.getClass().getName()} }

/* for search, force explicit class, not one from object (since that's a hashmap */
operation=search {
    class:${values.get("class")}
}

operation=(edit, create, search) {
    class { editing:true; }
    field { editing:true; }
    action { editing:true; }
}
operation=(view, list) {
    class { editing:false; }
    field { editing:false; }
    action { editing:false; }
}

field {
    editing=true  { editable:true; }
    editing=false { editable:false; }
}

class {
    @trait=fourZones {
        zones: zLeft, zRight, zTop, zBottom, zDetail;
        fourZoneLayout:true;
    }
    @trait=oneZone {
        zones: [zLeft, zDetail];
    }
    @trait=tableZones {
        zones: [zMain, zLeft, zRight, zTop, zBottom, zDetail];
    }

    operation=(create,edit,view,search) {
        trait: fourZones;
    }
    operation=(list) {
        trait: tableZones;
    }
}
@traitGroup=FormZones {
    @trait=fourZones;
    @trait=oneZone;
}


field {
    type                    { component:AWString; bindings:{value:$value} }
    type=boolean { 
        bindings:{formatter:$formatters.boolean};
        editable { component:AWCheckbox }
    }
    type=ariba.util.core.Date   {
        bindings:{formatter:$formatters.shortDate};
        editable                { component:DateField }
    }
    type=java.math.BigDecimal   {
        bindings:{formatter:$formatters.money};
        editable                {
            component:AWTextField;
            bindings:{
                style:"text-align:right";
                size:13;
            };
        }
    }
    type=java.lang.Enum   {
        editable                {
            component:GenericChooser;
            bindings:{
                object:${object};
                key:${field};
                destinationClass:${type};
                displayKey:"name";
                formatter:$formatters.identifier;
            };

            operation=(search, list) {
                bindings: { type:Popup; }
            }
        }
    }

    type=java.util.List {
        @trait=enum editable {
            component:GenericChooser;
            bindings:{
                object:${object};
                key:${field};
                multiSelect:true;
                destinationClass:${properties.enumClass};
                displayKey:"name";
                formatter:$formatters.identifier;
            };
        }

        operation=(search, list)        { visible:false }

        @trait=ownedToMany {
            after:zDetail;
            component:MetaDetailTable;
        }
    }

    type=(java.lang.Integer, int) {
        bindings:{formatter:$formatters.integer};
        operation=search { bindings:{formatter:$formatters.blankNull.integer} }
        editable                { component:AWTextField; bindings:{style:"text-align:right"; size:13} }
    }

    type=(java.lang.Long, long) {
        bindings:{formatter:$formatters.long};
        operation=search { bindings:{formatter:$formatters.blankNull.long} }
        editable                { component:AWTextField; bindings:{style:"text-align:right"; size:13} }
    }

    type=java.lang.String {
        editable                { component:AWTextField }
        @trait=longtext {
            after:zBottom;
            editable            { component:AWTextArea;
                                  bindings:{cols:60; rows:10} }
            operation=(search, list)  { visible:false }
        }
        @trait=richtext {
            after:zBottom;
            bindings:{escapeUnsafeHtml:true}
            editable            { component:RichTextArea;
                                  bindings:{cols:60; rows:10} }
            operation=(search)  { after:zNone }
            operation=(list)  { editable:false; after:zDetail; }
        }
        @trait=secret {
            bindings:{formatter:$formatters.hiddenPassword};
            editable   { component:AWPasswordField; bindings:{formatter:null} }
            operation=(search, list) { visible: false; }
        }
        trait=truncated { component:TruncateString; bindings:{size:10} }
    }

    type="[B" {
        after:zNone;
        @trait=imageData {
            component:AWImageData;
            after:null;
            contentType:"image/jpeg";
            bindings:{
                bytes:$value;
                contentType:${ariba.ui.aribaweb.util.AWContentType.contentTypeNamed(properties.contentType)}
            }
        }
    }

    type="java.io.File" {
        editable {
            component:FileUploadChooser; bindings:{ file:$value };
        }
        editable=false {
            bindings: {value:${value ? value.name : "(none)"}}
        }
    }

    type=javax.mail.internet.MimeMessage {
        component:MimeMessageView;
        bindings:{ mimeMessage:$value }
    }

    type=ariba.ui.aribaweb.util.AWMimeParsedMessage {
        component:MimeMessageView;
        bindings:{ parsedMessage:$value }
    }

    @trait=derived {
        editable:false;
        editing { after:zNone; }

        @trait=searchable {
            operation=search {
                visible:true; editable:true!; after:null!;
            }
        }
    }

    @trait=required {
        operation=(edit, create) {
            required:true;
            object {
                valid: ${(value != null && value !="") ? true : "Answer required"}
            }
        }
    }

    @trait=enumeration {
        editable { component:GenericChooser; bindings:{
                    object:${object}; key:${properties.field}; list:${properties.choices};
                }
        }
    }

    @trait=noCreate { operation=create { visible:false } }
    @trait=noSearch { operation=search { visible:false } }

    component=GenericChooser {
        @trait=Popup        { bindings:{type:Popup} }
        @trait=PopupControl { bindings:{type:PopupControl} }
        @trait=Chooser      { bindings:{type:Chooser} }

        @trait=PostOnChange { bindings:{action:null} }
    }

    component=(AWString,AWHyperlink,PopupMenuLink) {
        @trait=bold {
            wrapperComponent:AWGenericContainer;
            wrapperBindings: { tagName:b; }
        }
        @trait=italic {
            wrapperComponent:AWGenericContainer;
            wrapperBindings: { tagName:i; }
        }
        @trait=heading1 {
            wrapperComponent:AWGenericContainer;
            wrapperBindings: { tagName:h1; }
        }
        @trait=heading2 {
            wrapperComponent:AWGenericContainer;
            wrapperBindings: { tagName:h2; }
        }
        @trait=heading3 {
            wrapperComponent:AWGenericContainer;
            wrapperBindings: { tagName:h3; }
        }
    }
}

@traitGroup=FieldType {
    @trait=longtext;
    @trait=richtext;
    @trait=secret;
}

@traitGroup=ChooserType {
    @trait=Popup;
    @trait=PopupControl;
    @trait=Chooser;
}

@traitGroup=WrapperStyle {
    @trait=bold;
    @trait=italic;
    @trait=heading1;
    @trait=heading2;
    @trait=heading3;
}

/* Why would *field* have an action?!?
field {
    @trait=(action, pageAction) {
        bindings: { action: [${meta().fireAction(this, component.requestContext)}] }
    }

    @trait=pageAction {
        actionResults:${requestContext.pageWithName(properties.pageName)}
    }
}
*/

action {
    visible:true;
    enabled:true;

    @trait=pageAction {
        actionResults:${requestContext.pageWithName(properties.pageName)}
    }

    @trait=modalComponentPage {
        actionResults:${requestContext.pageWithName("MetaModalPage")};
        pageBindings:{
            componentName:${properties.componentName};
            title:${properties.title};
        }
    }
    
    @trait=modalComponentPanel {
        actionResults:${requestContext.pageWithName("MetaModalPage")};
        pageBindings:{
            componentName:${properties.componentName};
            title:${properties.title};
            clientPanel:true;
        }
    }

    @trait=messageResults {
        message:"Action Performed: %s";
        actionResults:${
            def o = (properties.isInstanceAction) ? object : ariba.ui.aribaweb.util.AWUtil.classForName(properties.class);
            def v = ariba.util.fieldvalue.FieldValue.getFieldValue(o, properties.action);
            def m = ariba.util.core.Fmt.S(properties.message, v);
            ariba.ui.widgets.AribaPageContent.setMessage(m, requestContext.session());
            null};
    }

    @trait=instance {
    	enabled:${object != null};
    	isInstanceAction:true;
    }

    filterActions=instance {
    	visible:${properties.isInstanceAction}
    }
    filterActions=static {
    	visible:${!properties.isInstanceAction}
    }
}

layout {
    zones: [zMain];
    @trait=ActionMenu { visible:true; component:MetaActionList bindings:{renderAsMenu:true} elementClass:flR }
    @trait=ActionButtons { visible:true; component:MetaActionList bindings:{renderAsButtons:true} elementClass:flR }
    @trait=InstanceActionButtons { visible:true; component:MetaActionList
                bindings:{renderAsButtons:true;filterActions:instance} elementClass:flR }
    @trait=StaticActionButtons { visible:true; component:MetaActionList
                bindings:{renderAsButtons:true;filterActions:static} elementClass:flR }
    @trait=Tabs { visible:true; component:MetaTabs }
    @trait=Sections { visible:true; component:MetaSections }
    @trait=Form { visible:true; component:MetaForm }
    @trait=Stack { visible:true; component:MetaElementList }

    @trait=OwnZone {
        zonePath:${layout}
    }

    @trait=OutlineBox {
        visible:true;
        wrapperComponent:AWGenericContainer;
        wrapperBindings: { tagName:div; style:"padding-bottom:10px"; }
        component:OutlineBox;
        bindings: {
            showExpandoCollapso:true;
            verboseCollapsedContent:false;
            awcontentLayouts:{body:Content; buttonArea:Actions};
        };
    }
}

@traitGroup=ActionGrouping {
    @trait=ActionMenu;
    @trait=ActionButtons;
    @trait=InstanceActionButtons;
    @trait=StaticActionButtons;
}

@traitGroup=LayoutGrouping {
    @trait=Tabs;
    @trait=Sections;
    @trait=Form;
    @trait=Stack;
}

layout=(Inspect, SearchForm) { trait:Form; label:${ariba.ui.meta.core.UIMeta.beautifyClassName(values.class)}; }
layout=InspectWithActions {
    trait:Stack;
    @layout=Actions#ActionMenu;
    @layout=Inspect#Form;
}
layout=InspectStack {
    trait:Stack;
    @layout=ISMain {
        visible:true;
        component:OutlineBox;
        bindings: {
            title:"No item selected";
            showExpandoCollapso:true;
            verboseCollapsedContent:false;
            awcontentLayouts:{body:Inspect; buttonArea:Actions};
        };
        object { bindings: { title:$properties.objectTitle; } }

        wrapperComponent:AWGenericContainer;
        wrapperBindings: { tagName:div; style:"padding-bottom:10px;padding-top:3px"; }

        @layout=Inspect {}
        @layout=Actions#ActionButtons {}
    }
    @layout=ObjectDetail#Form { zonePath:ObjectDetail; }
    }

layout=ButtonArea { trait:StaticActionButtons }
layout=SelectionButtonArea { trait:InstanceActionButtons }

/* Support @Trait("labelField") to identity label field */
layout=LabelField field {
    visible:false;
    @trait=labelField { visible:true! }
}

object class  { objectTitle:${ariba.util.fieldvalue.FieldValue.getFieldValue(object,
                    ariba.ui.meta.core.UIMeta.getInstance().displayKeyForClass(values.class))}; }
object layout { objectTitle:${ariba.util.fieldvalue.FieldValue.getFieldValue(object,
                    ariba.ui.meta.core.UIMeta.getInstance().displayKeyForClass(values.class))}; }

module {
    visible:true;
    homePage:MetaHomePage;
    component:MetaDashboardLayout;
    layout { visible:true }

    @trait=ActionTOC {
        @layout=Actions {
           label:"Actions";
           component:"MetaActionList";
           after:zToc;
        }
    }
}

actionCategory {
    visible:true;
}
@actionCategory=Manage { after:Search; }


/* For groovy */
field=metaClass { visible:false }
